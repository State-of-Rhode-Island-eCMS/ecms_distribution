# Builds Drupal and deploys to Acquia.
---
name: Build and Deploy
on:
  push:
    branches:
      - '**'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  PHP_VERSION: '8.1'
  PHP_EXTENSIONS: 'gd, curl, mbstring, mysqli, opcache, xml, zip, apcu'
  PHP_TOOLS: 'composer'
  NODE_VERSION: '10.x'
  DRUPAL_ARCHIVE_CONTENTS: 'config vendor docroot composer.json composer.lock'

jobs:
  test:
    name: Test Drupal
    runs-on: ubuntu-latest
    services:
      database:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: drupal
          MYSQL_USER: drupal
          MYSQL_PASSWORD: drupal
        ports:
          - 3306:3306
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          tools: ${{ env.PHP_TOOLS }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Prepare access to the profile repository
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ECMS_PROFILE_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Set ephemeral encryption key
        run: echo -e  "ENCRYPTION_PRIVATE_KEY=$(dd if=/dev/urandom bs=32 count=1 | base64 -i -)" >> $GITHUB_ENV

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress

      - name: Install Node dependencies
        run: npm ci --no-fund --no-progress

      - name: Install Drupal
        run: php vendor/bin/drush site-install --yes ecms_acquia

      # Comment out PHPUnit testing suite until D10 compatibility is sorted out
      # - name: Run PHPUnit tests
      #   run: composer test:php

      - name: Run PHPCS tests
        run: composer validate:php

      # PHPStan was not active in Ansible-based CI; commenting out for now
      # - name: Run PHPStan tests
      #   run: php vendor/bin/phpstan analyze

  build:
    name: Build Drupal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          tools: ${{ env.PHP_TOOLS }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Prepare access to the profile repository
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ECMS_PROFILE_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Set ephemeral encryption key
        run: echo -e  "ENCRYPTION_PRIVATE_KEY=$(dd if=/dev/urandom bs=32 count=1 | base64 -i -)" >> $GITHUB_ENV

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --no-dev

      - name: Install Gulp
        run: npm install --global gulp-cli

      - name: Install Node dependencies
        run: npm ci --no-fund --no-progress --production

      - name: Run Gulp
        run: gulp build

      - name: Validate Gulp
        run: gulp validate

      - name: Archive Drupal
        run: tar -czf drupal.tar.gz ${{ env.DRUPAL_ARCHIVE_CONTENTS }}

      - name: Upload Drupal archive
        uses: actions/upload-artifact@v3
        with:
          name: drupal
          path: drupal.tar.gz

  deploy:
    name: Deploy to Acquia
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Ensure SSH directory exists
        run: mkdir -p ~/.ssh && chmod 700 ~/.ssh

      - name: Add Acquia SSH host key to known hosts
        run: ssh-keyscan -p 22 -H svn-2398.enterprise-g1.hosting.acquia.com >> ~/.ssh/known_hosts

      - name: Create SSH key file
        run: echo "${{ secrets.ACQUIA_SSH_KEY }}" > ~/.ssh/id_acquia

      - name: Set permissions on SSH key file
        run: chmod 600 ~/.ssh/id_acquia

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host svn-2398.enterprise-g1.hosting.acquia.com" >> ~/.ssh/config
          echo "  Port 22" >> ~/.ssh/config
          echo "  User riecms" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_acquia" >> ~/.ssh/config

      - name: Configure git identity
        run: |
          git config --global user.email "devops@oomphinc.com"
          git config --global user.name "Oomph DevOps"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TODO: pull requests may be in a detached head state (no branch checked out), so we need
      # to check if a branch is checked out and if not create a new, temporary branch to use

      - name: Download Drupal archive
        uses: actions/download-artifact@v3
        id: download
        with:
          name: drupal

      - name: Unarchive Drupal
        run: tar -xzf drupal.tar.gz

      # This deletes all files in the repository except for those listed in inputs.drupal-archive-contents
      # and a few other necessary files
      - name: Trim repository contents
        run: |
          shopt -s extglob dotglob
          rm -rf !($(echo "${{ env.DRUPAL_ARCHIVE_CONTENTS }}" | tr ' ' '|')|.git|.gitignore|.gitattributes|.|..)

      - name: Remove embedded git repositories
        run: find ${{ env.DRUPAL_ARCHIVE_CONTENTS }} -name .git -type d -exec rm -rf {} +

      - name: Add all changes to git
        run: git add --force .

      - name: Commit build artifact files to git
        run: git commit -m "Automated build from GitHub Actions"

      - name: Add Acquia repository as remote
        run: git remote add acquia riecms@svn-2398.enterprise-g1.hosting.acquia.com:riecms.git

      - name: Force push branch to Acquia
        if: github.ref_type == 'branch'
        run: git push --force acquia HEAD:refs/heads/${{ github.ref_name }}

      - name: Force push tag to Acquia
        if: github.ref_type == 'tag'
        run: git push --force acquia HEAD:refs/tags/${{ github.ref_name }}
